(()=>{"use strict";var e={1074:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractEvaluator=void 0,t.AbstractEvaluator=class{constructor(e){this._fieldJson=e,this._fieldId=e.id}get fieldId(){return this._fieldId}get fieldJson(){return this._fieldJson}}},8758:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractSubfieldEvaluator=void 0;const r=s(1074);class a extends r.AbstractEvaluator{parseValues(e){const t=this.parseSubmittedData(e);return{[this.fieldId]:t}}parseSubmittedData(e){const t=e[this.fieldId]||[];return t?t.split("\n").map((e=>{const[t,s]=e.split("=");return{subfieldId:(t||"").trim(),value:(s||"").trim()}})):null}evaluateWithValues(e){const t=this.parseSubmittedData(e),s=Array.isArray(t)&&t.reduce(((e,t,s,r)=>(this.supportedSubfieldIds.includes(t.subfieldId)&&(e[t.subfieldId]=t.value),e)),{});return{[this.fieldId]:s}}}t.AbstractSubfieldEvaluator=a},8993:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AddressEvaluator=void 0;const r=s(8758);class a extends r.AbstractSubfieldEvaluator{constructor(){super(...arguments),this._supportedSubfieldIds=["address","address2","city","state","zip","country"]}get supportedSubfieldIds(){return this._supportedSubfieldIds}}t.AddressEvaluator=a},1737:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Evaluator=void 0;const r=s(8993),a=s(8186),i=s(1689),d=s(844),u=s(5078),l=s(1511),o=s(7961),n=s(3578),c=s(7470);t.Evaluator=class{static getEvaluatorWithFieldJson(e){switch(e.type){case"address":return new r.AddressEvaluator(e);case"name":return new u.NameEvaluator(e);case"matrix":return new o.MatrixEvaluator(e);case"product":return new c.ProductEvaluator(e);case"number":case"rating":return new d.NumericOnlyEvaluator(e);case"checkbox":case"radio":case"select":return new i.MultiSelectEvaluator(e);case"datetime":case"email":case"file":case"phone":case"signature":case"text":case"textarea":return new a.GenericEvaluator(e);case"creditcard":case"embed":case"richtext":case"section":return new n.NonValueEvaluator(e);default:throw new l.FieldTypeUnknownError(`Unknown field type: '${e.type}'.`)}}}},8186:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GenericEvaluator=void 0;const r=s(1074);class a extends r.AbstractEvaluator{parseValues(e){return{[this.fieldId]:e[this.fieldId]}}evaluateWithValues(e){return this.parseValues(e)}}t.GenericEvaluator=a},7961:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MatrixEvaluator=void 0;const r=s(1074);class a extends r.AbstractEvaluator{constructor(){super(...arguments),this._supportedSubfieldIds=["first","last","initial","prefix","suffix","middle"]}get supportedSubfieldIds(){return this._supportedSubfieldIds}parseValues(e){const t=this.parseSubmittedData(e);return{[this.fieldId]:t}}parseSubmittedData(e){const t=e[this.fieldId]||[];return t?t.split("\n").map((e=>{const[t,s]=e.split("=");return{subfieldId:(t||"").trim(),value:(s||"").trim()}})):null}evaluateWithValues(e){const t=this.parseSubmittedData(e),s=Array.isArray(t)&&t.reduce(((e,t,s,r)=>(e[t.subfieldId]=t.value,e)),{});return{[this.fieldId]:s}}}t.MatrixEvaluator=a},1689:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MultiSelectEvaluator=void 0;const r=s(8648),a=s(1074);class i extends a.AbstractEvaluator{parseValues(e){const t=(this.fieldJson.options||[]).find((t=>t.value===e[this.fieldId]));return{[this.fieldId]:null==t?void 0:t.value}}evaluateWithValues(e){const t=this.parseValues(e)[this.fieldId];return void 0===t?{[this.fieldId]:new r.InvalidEvaluation("Selected option not found.",{options:this.fieldJson.options||[],searchValue:e[this.fieldId]})}:{[this.fieldId]:t}}evaluateMultiSelect(e){const t=this.fieldJson.options||[],s=t.find((t=>t.value===e[this.fieldId]));return void 0===s?{[this.fieldId]:new r.InvalidEvaluation("Selected option not found.",{options:t,searchValue:e[this.fieldId]})}:{[this.fieldId]:s.value}}}t.MultiSelectEvaluator=i},5078:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.NameEvaluator=void 0;const r=s(8758);class a extends r.AbstractSubfieldEvaluator{constructor(){super(...arguments),this._supportedSubfieldIds=["first","last","initial","prefix","suffix","middle"]}get supportedSubfieldIds(){return this._supportedSubfieldIds}}t.NameEvaluator=a},3578:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.NonValueEvaluator=void 0;const r=s(1074);class a extends r.AbstractEvaluator{parseValues(e){return{[this.fieldId]:e[this.fieldId]}}evaluateWithValues(e){return{[this.fieldId]:null}}}t.NonValueEvaluator=a},844:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.NumericOnlyEvaluator=void 0;const r=s(8648),a=s(1074);class i extends a.AbstractEvaluator{parseValues(e){return{[this.fieldId]:e[this.fieldId]}}evaluateWithValues(e){return t=e[this.fieldId],Number(t)==t?{[this.fieldId]:e[this.fieldId]}:{[this.fieldId]:new r.InvalidEvaluation(`Could not convert to number: '${e[this.fieldId]}', fieldId: ${this.fieldId}.`)};var t}}t.NumericOnlyEvaluator=i},7470:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ProductEvaluator=void 0;const r=s(8758);class a extends r.AbstractSubfieldEvaluator{constructor(){super(...arguments),this._supportedSubfieldIds=["charge_type","quantity","unit_price","total"]}get supportedSubfieldIds(){return this._supportedSubfieldIds}}t.ProductEvaluator=a},8648:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InvalidEvaluation=void 0,t.InvalidEvaluation=class{constructor(e,t){this._message=e,this._payload=t}get message(){return this._message}get payload(){return this._payload}}},1511:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FieldTypeUnknownError=void 0;class s extends Error{constructor(e,t){super(e),this._debugObject=t,this.name=this.constructor.name}get code(){return"ERR_UNKNOWN_FIELD_TYPE"}get debugObject(){return this._debugObject}}t.FieldTypeUnknownError=s}},t={};function s(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,s),i.exports}(()=>{const e=s(1737);s(1737);e.Evaluator})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,