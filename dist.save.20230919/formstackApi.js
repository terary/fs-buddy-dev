(()=>{"use strict";var __webpack_modules__={9704:function(e,t,r){var i,n,o,s=this&&this.__classPrivateFieldGet||function(e,t,r,i){if("a"===r&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?i:"a"===r?i.call(e):i?i.value:t.get(e)},d=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.GenericDirectedGraph=t.AbstractDirectedGraph=void 0;const a=d(r(3544)),l=r(3599),c=r(6617),u=e=>e.nodeContent;class h extends c.AbstractTree{appendChildNodeWithContent(e,t){return super.appendChildNodeWithContent(e,t)}cloneAt(e){const t=this.toPojoAt(e);return h.fromPojo(t,u)}createSubtreeAt(e){const t=new this.constructor(e),r=super.appendChildNodeWithContent(e,t);return t._rootNodeId=r,t._nodeDictionary={},t._nodeDictionary[t._rootNodeId]={nodeContent:null},t._incrementor=this._incrementor,t}fromPojoAppendChildNodeWithContent(e,t){return this.appendChildNodeWithContent(e,t)}static getNewInstance(e,t){return new p(e,t)}static fromPojo(e,t=u){return s(h,i,"m",o).call(h,e,t)}}t.AbstractDirectedGraph=h,i=h,o=function(e,t=u){const r=Object.assign({},e),o=a.default.parseUniquePojoRootKeyOrThrow(r),d=r[o],c=h.getNewInstance();if(c.replaceNodeContent(c.rootNodeId,t(d)),delete r[o],s(h,i,"f",n).call(h,c._rootNodeId,o,c,r,t),Object.keys(r).length>0)throw new l.DirectedGraphError("Orphan nodes detected while parsing pojo object.");return c},n={value:(e,t,r,o,d,l=[])=>{const u=a.default.extractChildrenNodes(t,o);return Object.entries(u).forEach((([t,a])=>{if(a.nodeType===c.AbstractTree.SubtreeNodeTypeName){const c=r.createSubtreeAt(e);c.replaceNodeContent(c.rootNodeId,d(a)),s(h,i,"f",n).call(h,c.rootNodeId,t,c,o,d,l)}else{const c=r.fromPojoAppendChildNodeWithContent(e,d(a));l.push({from:t,to:c}),s(h,i,"f",n).call(h,c,t,r,o,d,l)}})),l}};class p extends h{}t.GenericDirectedGraph=p},6780:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GenericDirectedGraph=t.AbstractDirectedGraph=void 0;var i=r(9704);Object.defineProperty(t,"AbstractDirectedGraph",{enumerable:!0,get:function(){return i.AbstractDirectedGraph}}),Object.defineProperty(t,"GenericDirectedGraph",{enumerable:!0,get:function(){return i.GenericDirectedGraph}})},3544:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=r(3599),n=e=>{const t=[];return Object.entries(e).forEach((([e,r])=>{e===r.parentId&&t.push(e)})),t};t.default={extractChildrenNodes:(e,t)=>{const r={};return Object.entries(t).forEach((([i,n])=>{n.parentId===e&&(r[i]=n,delete t[i])})),r},parseCandidateRootNodeId:n,parseUniquePojoRootKeyOrThrow:e=>{const t=n(e);if(1!==t.length)throw new i.DirectedGraphError(`No distinct root found. There must exist on and only one nodeId === {parentId}. Found ${t.length}.`);return t[0]}}},1584:function(e,t,r){var i,n,o,s,d,a=this&&this.__classPrivateFieldGet||function(e,t,r,i){if("a"===r&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?i:"a"===r?i.call(e):i?i.value:t.get(e)},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.GenericExpressionTree=t.AbstractExpressionTree=void 0;const c=r(6617),u=r(3599),h=l(r(3544)),p=r(9809),f=e=>e.nodeContent;class g extends c.AbstractTree{constructor(e="_root_",t){super(e,t),i.add(this)}appendContentWithAnd(e,t){return this.appendContentWithJunction(e,{operator:"$and"},t)}defaultJunction(e){return{operator:"$and"}}appendTreeAt(e,t,r){let i=e;if(this.isLeaf(e)){const t=this.getChildContentAt(e);this.replaceNodeContent(e,this.defaultJunction(e)),i=this.appendChildNodeWithContent(e,t)}const n=super.appendTreeAt(i,t,r);return i!==e&&n.push({from:e,to:i}),n}appendContentWithOr(e,t){return this.appendContentWithJunction(e,{operator:"$or"},t)}appendContentWithJunction(e,t,r){if(this.isBranch(e)){super.replaceNodeContent(e,t);const n=a(this,i,"m",o).call(this,e);let s;return n.length>0?(s=n[0],super.replaceNodeContent(s,r)):s=super.appendChildNodeWithContent(e,r),{newNodeId:s,originalContentNodeId:void 0,junctionNodeId:e,isNewBranch:!1}}const n=this.getChildContentAt(e),s=super.appendChildNodeWithContent(e,n);return this.replaceNodeContent(e,t),{newNodeId:super.appendChildNodeWithContent(e,r),originalContentNodeId:s,junctionNodeId:e,isNewBranch:!0}}appendChildNodeWithContent(e,t){const r=a(this,i,"m",o).call(this,e);return r.length>0?(super.replaceNodeContent(r[0],t),r[0]):super.appendChildNodeWithContent(e,t)}cloneAt(e=this.rootNodeId){const t=this.toPojoAt(e);return g.fromPojo(t,f)}getNewInstance(e,t){return super._getNewInstance(e,t)}static reRootTreeAt(e,t,r){const i=e.getTreeNodeIdsAt(t),n=[];return i.forEach((i=>{const o=i.replace(t,r);e._nodeDictionary[o]=e._nodeDictionary[i],delete e._nodeDictionary[i],n.push({from:i,to:o})})),n}static getNewInstance(e,t){return new _(e,t)}static fromPojo(e,t=f){const r=a(g,n,"m",s).call(g,e,t);return g.validateTree(r),r}fromPojoAppendChildNodeWithContent(e,t){return this.appendChildNodeWithContent(e,t)}_getSiblingIds(e){return super.getSiblingIds(e)}removeNodeAt(e){const t=this._getSiblingIds(e);if(t.length>1)return super.removeNodeAt(e);const r=this.getParentNodeId(e),i=this.getChildContentAt(t[0]);this.replaceNodeContent(r,i),super.removeNodeAt(t[0]),super.removeNodeAt(e)}static validateTree(e){e.getTreeNodeIdsAt(e.rootNodeId).forEach((t=>{if(e.isBranch(t)){const r=e.getChildrenNodeIdsOf(t);if(r.length<2)throw new p.ExpressionTreeError(`Tree fails no-single-child rule. childIds: '${r.join("', '")}'.`)}}))}}t.AbstractExpressionTree=g,n=g,i=new WeakSet,o=function(e){return this.getChildrenNodeIdsOf(e).filter((e=>null===this.getChildContentAt(e)))},s=function(e,t=f){const r=Object.assign({},e),i=h.default.parseUniquePojoRootKeyOrThrow(r),o=r[i],s=g.getNewInstance("root");if(s.replaceNodeContent(s.rootNodeId,t(o)),delete r[i],a(g,n,"f",d).call(g,s._rootNodeId,i,s,r,t),Object.keys(r).length>0)throw new u.DirectedGraphError("Orphan nodes detected while parsing pojo object.");return s},d={value:(e,t,r,i,o,s=[])=>{const l=h.default.extractChildrenNodes(t,i);return Object.entries(l).forEach((([t,l])=>{if(l.nodeType===c.AbstractTree.SubtreeNodeTypeName){const c=r.createSubtreeAt(e);c.replaceNodeContent(c.rootNodeId,o(l)),a(g,n,"f",d).call(g,c.rootNodeId,t,c,i,o,s)}else{const c=r.fromPojoAppendChildNodeWithContent(e,o(l));s.push({from:t,to:c}),a(g,n,"f",d).call(g,c,t,r,i,o,s)}})),s}};class _ extends g{getNewInstance(e,t){return new _(e,t)}createSubtreeAt(e){const t=new _("_subtree_"),r=this.appendChildNodeWithContent(e,t);return g.reRootTreeAt(t,t.rootNodeId,r),t._rootNodeId=r,t._incrementor=this._incrementor,t}}t.GenericExpressionTree=_},9809:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ExpressionTreeError=void 0;class r extends Error{constructor(e){super(e),this._code="ERR_EXPRESSION_TREE",this.name=this._code}get code(){return this._code}}t.ExpressionTreeError=r},9957:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GenericExpressionTree=t.AbstractExpressionTree=void 0;var i=r(1584);Object.defineProperty(t,"AbstractExpressionTree",{enumerable:!0,get:function(){return i.AbstractExpressionTree}}),Object.defineProperty(t,"GenericExpressionTree",{enumerable:!0,get:function(){return i.GenericExpressionTree}})},1805:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractObfuscatedExpressionTree=void 0;const i=r(1584),n=r(5628),o=r(9017),s=r(6617);class d extends i.AbstractExpressionTree{constructor(e,t,r){super(t,r),this._internalTree=e||i.AbstractExpressionTree.fromPojo({root:{parentId:"root",nodeContent:s.AbstractTree.EmptyNode}}),this._keyStore=new n.KeyStore,this._internalTree.getTreeNodeIdsAt(this._internalTree.rootNodeId).forEach((e=>{this._keyStore.putValue(e)})),this._rootKey=this._keyStore.reverseLookUpExactlyOneOrThrow(this._internalTree.rootNodeId),this._internalTree.getSubtreeIdsAt(this._internalTree.rootNodeId).forEach((e=>{const t=this._internalTree.getChildContentAt(e);this._keyStore.putValue(e),this._internalTree.replaceNodeContent(e,new a(t))}))}get rootNodeId(){return this._rootKey}appendChildNodeWithContent(e,t){const r=this._getNodeIdOrThrow(e),i=this._internalTree.appendChildNodeWithContent(r,t);return this._keyStore.putValue(i)}static appendTreeAt(e,t,r,i){const n=e._getNodeIdOrThrow(t);return e._internalTree.appendTreeAt(n,r instanceof d?r._internalTree:r,i).map((({from:t,to:r})=>({from:t,to:e._keyStore.putValue(r)})))}appendTreeAt(e,t,r){return d.appendTreeAt(this,e,t,r)}appendContentWithJunction(e,t,r){const i=this._getNodeIdOrThrow(e);if(this.isBranch(e)){const n=this._internalTree.appendContentWithJunction(i,t,r);return{isNewBranch:!1,newNodeId:this._keyStore.putValue(n.newNodeId),junctionNodeId:e}}const n=this._internalTree.appendContentWithJunction(i,t,r);return n.junctionNodeId=this._keyStore.reverseLookUpExactlyOneOrThrow(n.junctionNodeId),n.originalContentNodeId=this._keyStore.putValue(n.originalContentNodeId),n.newNodeId=this._keyStore.putValue(n.newNodeId),n}cloneAt(e){const t=this._getNodeIdOrThrow(e),r=this._internalTree.cloneAt(t);return new l(r)}buildReverseMap(e={}){return this._keyStore.allKeys().forEach((t=>{const r=this._keyStore.getValue(t);e[r]=t})),this._internalTree.getSubtreeIdsAt(this._internalTree.rootNodeId).forEach((t=>{this._internalTree.getChildContentAt(t).buildReverseMap(e)})),e}countTotalNodes(e=this.rootNodeId,t){const r=this._getNodeIdOrThrow(e);return this._internalTree.countTotalNodes(r,t)}getChildContentAt(e){const t=this._getNodeIdOrThrow(e);return this._internalTree.getChildContentAt(t)}getChildrenNodeIdsOf(e,t){const r=this._getNodeIdOrThrow(e);return this.reverseMapKeys(this._internalTree.getChildrenNodeIdsOf(r,t))}getChildrenContentOf(e,t){const r=this._getNodeIdOrThrow(e);return this._internalTree.getChildrenContentOf(r,t)}getDescendantContentOf(e,t){const r=this._getNodeIdOrThrow(e);return this._internalTree.getDescendantContentOf(r,t)}getDescendantNodeIds(e,t){const r=this._getNodeIdOrThrow(e);return this.reverseMapKeys(this._internalTree.getDescendantNodeIds(r,t))}createSubtreeAt(e){const t=this._internalTree.appendChildNodeWithContent(e,null),r=(this._internalTree.getNewInstance(t),this.getNewInstance(t));this._internalTree.replaceNodeContent(t,r);const i=this._keyStore.putValue(t);return r._keyStore=new n.KeyStore,r._keyStore.putValue(t,i),r._rootNodeId=t,r._nodeDictionary={[t]:{nodeContent:null}},r._rootKey=i,r._internalTree._incrementor=this._internalTree._incrementor,r}getNewInstance(e,t){const r=new i.GenericExpressionTree(e,t);return new class extends d{}(r)}getParentNodeId(e){const t=this._getNodeIdOrThrow(e),r=this._internalTree.getParentNodeId(t);return this._keyStore.reverseLookUpExactlyOneOrThrow(r)}getSiblingIds(e){const t=this._getNodeIdOrThrow(e);return this.reverseMapKeys(this._internalTree.getSiblingIds(t))}getTreeContentAt(e=this.rootNodeId,t){const r=this._getNodeIdOrThrow(e),i=this._internalTree.getTreeContentAt(r);return t?(this._internalTree.getSubtreeIdsAt().forEach((e=>{const t=this._internalTree.getChildContentAt(e);null!==t&&i.push(...t.getTreeContentAt())})),i):i}getTreeNodeIdsAt(e){const t=this._getNodeIdOrThrow(e);return this.reverseMapKeys(this._internalTree.getTreeNodeIdsAt(t))}_getNodeId(e){return this._keyStore.getValue(e)}_getNodeIdOrThrow(e){const t=this._getNodeId(e);if(void 0===t)throw new o.ObfuscatedError(`Failed to find nodeId with key: '${e}'.`);return t}isLeaf(e){const t=this._getNodeIdOrThrow(e);return this._internalTree.isLeaf(t)}removeNodeAt(e){const t=this._getNodeIdOrThrow(e);super.removeNodeAt.call(this._internalTree,t)}replaceNodeContent(e,t){const r=this._getNodeIdOrThrow(e);this._internalTree.replaceNodeContent(r,t)}reverseMapKeys(e){return e.map((e=>this._keyStore.reverseLookUpExactlyOneOrThrow(e)))}wrapVisitor(e){return{includeSubtrees:e.includeSubtrees,visit:(t,r,i)=>{e.visit(t,r,i)}}}toPojoAt(e=this.rootNodeId){const t=this._getNodeIdOrThrow(e),r=this._internalTree.toPojoAt(t);return d.obfuscatePojo(r)}static obfuscatePojo(e){const t=Object.assign({},e),r=new n.KeyStore;return Object.keys(t).forEach((e=>{const i=r.putValue(e);t[i]=Object.assign({},t[e]),delete t[e]})),Object.entries(t).forEach((([e,i])=>{t[e].parentId=r.reverseLookUpExactlyOneOrThrow(t[e].parentId)})),t}visitAllAt(e,t=this.rootNodeId,r=this.rootNodeId){const i=this.getChildrenNodeIdsOf(t,e.includeSubtrees),n=this.getChildContentAt(t),o=this.wrapVisitor(e);e.includeSubtrees&&n instanceof d?n._internalTree.visitAllAt(o):e.visit(t,n,r),i.forEach((e=>{this.visitAllAt(o,e,t)}))}visitLeavesOf(e,t=this.rootNodeId){this.wrapVisitor(e),this._getNodeIdOrThrow(t);const r=this.getDescendantNodeIds(t,e.includeSubtrees).filter((e=>this.isLeaf(e)&&!this.isSubtree(e)));e.includeSubtrees&&r.push(...this.getSubtreeIdsAt(t)),r.forEach((t=>{const r=this.getParentNodeId(t),i=this.getChildContentAt(t);i instanceof d?i._internalTree.visitLeavesOf(e):e.visit(t,i,r)}))}static fromPojo(e){const t=i.AbstractExpressionTree.fromPojo(e);return i.AbstractExpressionTree.validateTree(t),new class extends d{}(t)}fromPojoAppendChildNodeWithContent(e,t){const r=this._keyStore.reverseLookUpExactlyOneOrThrow(e),i=this.appendChildNodeWithContent(r,t);return this._keyStore.getValue(i)}}t.AbstractObfuscatedExpressionTree=d;class a extends d{}class l extends d{}},9017:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ObfuscatedError=void 0;class r extends Error{constructor(e){super(e),this.name="ObfuscatedError"}get code(){return"ERR_OBFUSCATE_ERROR"}}t.ObfuscatedError=r},1390:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractObfuscatedExpressionTree=void 0;var i=r(1805);Object.defineProperty(t,"AbstractObfuscatedExpressionTree",{enumerable:!0,get:function(){return i.AbstractObfuscatedExpressionTree}})},6617:function(e,t,r){var i,n,o,s,d,a,l,c,u,h,p,f,g,_,v,b,I,y=this&&this.__classPrivateFieldGet||function(e,t,r,i){if("a"===r&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?i:"a"===r?i.call(e):i?i.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractTree=void 0;const m=r(3599),w=r(7544),N=r(5628),T=e=>e,A=(e,t,r="")=>new RegExp("^"+e+t,r);class S{constructor(e="_root_",t){i.add(this),this._nodeDictionary={},this._nodeKeyDelimiter=":",this._incrementor=new w.Incrementor,this._rootNodeId=e,void 0===t?y(this,i,"m",_).call(this,this._rootNodeId,S.EmptyNode):this._nodeDictionary[this._rootNodeId]={nodeContent:t}}appendChildNodeWithContent(e,t){return y(this,i,"m",n).call(this,e,t)}appendTreeAt(e=this.rootNodeId,t,r){return S.appendTree(this,t,e,r)}static appendTree(e,t,r,n){const o=n||t.rootNodeId,s=y(t,i,"m",h).call(t,o),d=new RegExp(o,"g"),a=(t._rootNodeId,t._rootNodeId,s.map((e=>{const t=e.replace(d,r+":treeAppend");return{from:e,to:t}})));return a.forEach((({from:r,to:n})=>{if(n in e._nodeDictionary)throw new Error(`ID COLLISION offending node: "${n}".`);e._nodeDictionary[n]=t._nodeDictionary[r],y(e,i,"m",c).call(e,"ANY")})),a}countDescendantsOf(e=this.rootNodeId){return y(this,i,"m",o).call(this,e),this.getDescendantNodeIds(e).length}countGreatestDepthOf(e=this.rootNodeId){y(this,i,"m",s).call(this,e);let t=1;const r=this.getDescendantNodeIds(e);if(0===r.length)return t;const n=this.getBranchDepth(e);for(let e of r){const r=this.getBranchDepth(e)-n+1;r>t&&(t=r)}return t}countLeavesOf(e=this.rootNodeId){return this.getDescendantNodeIds(e).filter((e=>0===this.getDescendantNodeIds(e).length)).length}countTotalNodes(e=this.rootNodeId,t=!0){let r=y(this,i,"m",h).call(this,e).length;return t?(this.getSubtreeIdsAt(e).forEach((e=>{const t=this.getChildContentAt(e);r+=t.countTotalNodes()})),r):r}filterIds(e){return Object.keys(this._nodeDictionary).filter(e)}getBranchDepth(e){const t=new RegExp(this._nodeKeyDelimiter,"g");return(e.match(t)||[]).length+1}nodeIdExists(e){return void 0!==this._nodeDictionary[e]}getChildContentAt(e){return y(this,i,"m",d).call(this,e)}getNodeIdsWithNodeContent(e,t){return this.getTreeNodeIdsAt(this.rootNodeId).filter((t=>{if(this.isSubtree(t)||null===this.getChildContentAt(t))return!1;const r=this.getChildContentAt(t);return e(r)}))}getChildrenNodeIdsOf(e,t=!1){return y(this,i,"m",a).call(this,e,t)}getCountTotalNodes(){return Object.keys(this._nodeDictionary).length}getChildrenContentOf(e,t=!1){const r=y(this,i,"m",a).call(this,e,t);return y(this,i,"m",l).call(this,r)}getDescendantContentOf(e,t=!1){y(this,i,"m",o).call(this,e);const r=this.getDescendantNodeIds(e,t),n=[];return r.forEach((e=>{const r=y(this,i,"m",d).call(this,e);if(r instanceof S){const e=r,i=e.getTreeContentAt(e.rootNodeId,t);n.push(...i)}else n.push(r)})),n}getDescendantNodeIds(e,t=!1){const r=A(e,this._nodeKeyDelimiter);return t?this.filterIds((e=>r.test(e))):this.filterIds((e=>r.test(e)&&!this.isSubtree(e)))}_getNewInstance(e,t){return Reflect.construct(this.constructor,[e,t])}getParentNodeId(e){return y(this,i,"m",u).call(this,e)}getSiblingIds(e){if(this.isRoot(e))return[];const t=y(this,i,"m",u).call(this,e),r=y(this,i,"m",a).call(this,t),n=r.indexOf(e);return n>-1&&r.splice(n,1),r}getSubtreeIdsAt(e=this.rootNodeId){const t=this.getDescendantNodeIds(e,!0),r=this;return t.filter((e=>r.isSubtree(e)))}getTreeContentAt(e=this.rootNodeId,t=!1){if(this.nodeIdExists(e)){const r=this.getDescendantContentOf(e,t);return r.push(this.getChildContentAt(e)),r}return[]}getTreeNodeIdsAt(e){return y(this,i,"m",h).call(this,e)}isBranch(e){return this.getDescendantNodeIds(e).length>0}isLeaf(e){return y(this,i,"m",p).call(this,e)}isRoot(e){return e===this._rootNodeId}isSubtree(e){return this.getChildContentAt(e)instanceof S}move(e,t){const r=y(this,i,"m",c).call(this,t),n=y(this,i,"m",h).call(this,e).map((t=>({from:t,to:t.replace(e,r)})));return n.forEach((({from:e,to:t})=>{y(this,i,"m",f).call(this,e,t)})),n}moveChildren(e,t){const r=this.getDescendantNodeIds(e).map((r=>({from:r,to:r.replace(e,t)})));return r.forEach((({from:e,to:t})=>{y(this,i,"m",f).call(this,e,t)})),r}removeNodeAt(e){if(this.isRoot(e))throw new m.DirectedGraphError("Can not remove root node.");y(this,i,"m",h).call(this,e).forEach((e=>{this.removeSingleNode(e)}))}removeSingleNode(e){delete this._nodeDictionary[e]}replaceNodeContent(e,t){y(this,i,"m",g).call(this,e,t)}get rootNodeId(){return this._rootNodeId}visitAllAt(e,t=this.rootNodeId){const r=t;y(this,i,"m",v).call(this,e,t,r)}visitLeavesOf(e,t=this._rootNodeId){y(this,i,"m",b).call(this,e,t)}static obfuscatePojo(e){const t=Object.assign({},e),r=new N.KeyStore;return Object.keys(t).forEach((e=>{const i=r.putValue(e);t[i]=Object.assign({},t[e]),delete t[e]})),Object.entries(t).forEach((([e,i])=>{t[e].parentId=r.reverseLookUpExactlyOneOrThrow(t[e].parentId)})),t}toPojoAt(e=this.rootNodeId,t){return y(this,i,"m",I).call(this,e,e,t)}}t.AbstractTree=S,i=new WeakSet,n=function(e,t){const r=y(this,i,"m",c).call(this,e);return this._nodeDictionary[r]={nodeContent:t},r},o=function(e){if(this.nodeIdExists(e))return!0;throw new m.DirectedGraphError(`Tried to retrieve node that does not exist. nodeId: "${e}".`)},s=function(e){if(void 0===this._nodeDictionary[e])throw new m.DirectedGraphError(`Tried to retrieve node that does not exist. nodeId: "${e}".`);return y(this,i,"m",d).call(this,e)},d=function(e){return void 0===this._nodeDictionary[e]?S.EmptyNode:this._nodeDictionary[e].nodeContent},a=function(e,t=!1){const r=(i=e,n=this._nodeKeyDelimiter,new RegExp("^"+i+n+"[\\d]+$"));var i,n;return t?this.filterIds((e=>r.test(e))):this.filterIds((e=>r.test(e)&&!this.isSubtree(e)))},l=function(e){return e.map((e=>{var t;const r=y(this,i,"m",d).call(this,e);if(r instanceof S){const e=r.rootNodeId;return y(t=r,i,"m",d).call(t,e)}return r}))},c=function(e){return[e,this._incrementor.next].join(this._nodeKeyDelimiter)},u=function(e){if(e===this._rootNodeId)return this._rootNodeId;if(!e)throw new m.DirectedGraphError(`Could not derive parent nodeId from '${e}'.`);let t="";if(t=e.split(this._nodeKeyDelimiter).slice(0,-1).join(this._nodeKeyDelimiter),""===t)throw new m.DirectedGraphError(`Could not derive parent nodeId from '${e}'.`);return t},h=function(e){const t=A(e,"");return this.filterIds((e=>t.test(e)&&!this.isSubtree(e)))},p=function(e){return 0===this.getDescendantNodeIds(e).length},f=function(e,t){y(this,i,"m",_).call(this,t,y(this,i,"m",d).call(this,e)),this.removeSingleNode(e)},g=function(e,t){if(this.isRoot(e)&&t instanceof S)throw new m.DirectedGraphError("Can not replace root with subtree.");this._nodeDictionary[e]={nodeContent:t}},_=function(e,t){this._nodeDictionary[e]={nodeContent:t}},v=function e(t,r=this._rootNodeId,n=this._rootNodeId){const o=y(this,i,"m",a).call(this,r,t.includeSubtrees),s=y(this,i,"m",d).call(this,r);t.includeSubtrees&&s instanceof S?y(s,i,"m",e).call(s,t):t.visit(r,s,n),o.forEach((n=>{y(this,i,"m",e).call(this,t,n,r)}))},b=function e(t,r=this._rootNodeId){this.getDescendantNodeIds(r,t.includeSubtrees).filter((e=>y(this,i,"m",p).call(this,e))).forEach((r=>{const n=this.getParentNodeId(r),o=y(this,i,"m",d).call(this,r);o instanceof S?y(o,i,"m",e).call(o,t):t.visit(r,o,n)}))},I=function e(t,r,n=T,o={}){const s=this.getChildContentAt(t);if(s instanceof S){const e=s.toPojoAt(s.rootNodeId);Object.entries(e).forEach((([e,t])=>{o[e]=t})),o[t]={nodeType:S.SubtreeNodeTypeName,nodeContent:s.getChildContentAt(s.rootNodeId),parentId:r}}else o[t]={parentId:r,nodeContent:n(s)},y(this,i,"m",a).call(this,t,S.SHOULD_INCLUDE_SUBTREES).forEach((r=>{y(this,i,"m",e).call(this,r,t,n,o)}));return o},S.EmptyNode=null,S.SubtreeNodeTypeName="subtree",S.SHOULD_INCLUDE_SUBTREES=!0},7188:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractTree=void 0;var i=r(6617);Object.defineProperty(t,"AbstractTree",{enumerable:!0,get:function(){return i.AbstractTree}})},1212:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DirectedGraphError=void 0;class r extends Error{constructor(e){super(e),this._code="ERR_DIRECTED_GRAPH",this.name=this._code}get code(){return this._code}}t.DirectedGraphError=r},3599:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DirectedGraphError=void 0;var i=r(1212);Object.defineProperty(t,"DirectedGraphError",{enumerable:!0,get:function(){return i.DirectedGraphError}})},3028:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Incrementor=void 0,t.Incrementor=class{constructor(){this._counter=0}get next(){return this._counter++}}},7544:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Incrementor=void 0;var i=r(3028);Object.defineProperty(t,"Incrementor",{enumerable:!0,get:function(){return i.Incrementor}})},5628:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.KeyStore=void 0;const i=r(1614),n=r(4300);t.KeyStore=class{constructor(){this._keyStore={}}allKeys(){return Object.keys(this._keyStore)}getValue(e){return this._keyStore[e]}keyExists(e){return e in this._keyStore}keyExistsOrThrow(e){if(!this.keyExists(e))throw new n.KeyStoreError(`Key: '${e}' does not exist in store.`);return!0}putValue(e,t=i.v4()){if(this.keyExists(t))throw new n.KeyStoreError("Tried to overwrite value, key already exists in store. (use .replaceValue).");return this._keyStore[t]=e,t}removeKey(e){this.keyExistsOrThrow(e),delete this._keyStore[e]}replaceValue(e,t){this.keyExistsOrThrow(t),this._keyStore[t]=e}reverseLookUp(e){return Object.entries(this._keyStore).filter((([t,r])=>Object.is(e,r))).map((([e,t])=>e))}reverseLookUpExactlyOneOrThrow(e){const t=this.reverseLookUp(e);if(1!==t.length)throw new n.KeyStoreError(`Key: '${e}' has ${t.length} matches. Can not determine 1:1 mapping.`);return t[0]}swapValues(e,t){const r=this.getValue(e),i=this.getValue(t);this.replaceValue(i,e),this.replaceValue(r,t)}}},4300:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.KeyStoreError=void 0;class r extends Error{constructor(e){super(e),this._code="ERR_KEY_STORE",this.name=this._code}get code(){return this._code}}t.KeyStoreError=r},4925:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractDirectedGraph=t.DirectedGraphError=t.AbstractTree=t.AbstractObfuscatedExpressionTree=t.GenericExpressionTree=t.AbstractExpressionTree=void 0;var i=r(9957);Object.defineProperty(t,"AbstractExpressionTree",{enumerable:!0,get:function(){return i.AbstractExpressionTree}}),Object.defineProperty(t,"GenericExpressionTree",{enumerable:!0,get:function(){return i.GenericExpressionTree}});var n=r(1390);Object.defineProperty(t,"AbstractObfuscatedExpressionTree",{enumerable:!0,get:function(){return n.AbstractObfuscatedExpressionTree}});var o=r(7188);Object.defineProperty(t,"AbstractTree",{enumerable:!0,get:function(){return o.AbstractTree}});var s=r(3599);Object.defineProperty(t,"DirectedGraphError",{enumerable:!0,get:function(){return s.DirectedGraphError}});var d=r(6780);Object.defineProperty(t,"AbstractDirectedGraph",{enumerable:!0,get:function(){return d.AbstractDirectedGraph}})},9289:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FieldLogicService=void 0;const i=r(3228),n=r(6838);t.FieldLogicService=class{constructor(e){this._fieldCollection=i.FsTreeFieldCollection.fromFieldJson(e)}getAllFieldNodes(){return this._fieldCollection.getTreeContentAt().filter((e=>{if(!(null===e||e instanceof n.FsFormRootNode))return!0}))}getAllFieldSummary(){const e={};return this.getAllFieldNodes().forEach((t=>{const r=t.fieldId;e[r]={fieldId:r,label:t.field.label,type:t.field.fieldType}})),e}getFieldIdsWithLogic(){return this.getAllFieldNodes().filter((e=>{const{field:t}=e;return null!==t.getLogicTree()})).map((e=>null==e?void 0:e.fieldId))}getFieldIdsWithoutLogic(){return this.getAllFieldNodes().filter((e=>{const{field:t}=e;return null===t.getLogicTree()})).map((e=>null==e?void 0:e.fieldId))}getFieldIdsAll(){return this.getAllFieldNodes().map((e=>null==e?void 0:e.fieldId))}getFieldIdsWithCircularReferences(){return this._fieldCollection.getFieldIdsWithCircularLogic()}getCircularReferenceNodes(e){return this._fieldCollection.aggregateLogicTree(e).getCircularLogicNodes()}getCircularReferenceFieldIds(e){return this._fieldCollection.aggregateLogicTree(e).getCircularLogicNodes().map((e=>e.dependentChainFieldIds.slice(-2))).reduce(((e,t,r,i)=>[...e,...t]),[])}getFieldIdsExtendedLogicOf(e){return this._fieldCollection.aggregateLogicTree(e).getDependantFieldIds()}wrapFieldIdsIntoLabelOptionList(e){return e.map((e=>{const t=this._fieldCollection.getFieldTreeByFieldId(e);return{value:e,label:"section"===(null==t?void 0:t.fieldType)?"(section) "+(null==t?void 0:t.section_heading):(null==t?void 0:t.label)||""}}))}}},4518:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FormstackBuddy=void 0;const i=r(9289);class n{constructor(){}getFieldLogicService(e){return new i.FieldLogicService(e)}static getInstance(){return void 0===n._instance&&(n._instance=new n),n._instance}}t.FormstackBuddy=n},4340:function(e,t){var r,i,n=this&&this.__awaiter||function(e,t,r,i){return new(r||(r=Promise))((function(n,o){function s(e){try{a(i.next(e))}catch(e){o(e)}}function d(e){try{a(i.throw(e))}catch(e){o(e)}}function a(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,d)}a((i=i.apply(e,t||[])).next())}))},o=this&&this.__classPrivateFieldGet||function(e,t,r,i){if("a"===r&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?i:"a"===r?i.call(e):i?i.value:t.get(e)},s=this&&this.__classPrivateFieldSet||function(e,t,r,i,n){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!n)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?n.call(e,r):n?n.value=r:t.set(e,r),r};Object.defineProperty(t,"__esModule",{value:!0}),t.SubmissionManager=void 0;class d{constructor(){this._submissions={}}addTree(e,t){this._submissions[e]=t}getSubmission(e,t){return n(this,void 0,void 0,(function*(){if(this._submissions[t])return Promise.resolve(this._submissions[t]);{const i=yield(r={apiKey:e,submissionId:t},n(void 0,void 0,void 0,(function*(){const{apiKey:e,submissionId:t}=r;return new Promise(((r,i)=>{if(!e||!t)throw new Error(`missing: apiKey: '${e}' or submissionId: '${t}'.`);const n=`https://www.formstack.com/api/v2/submission/${t}.json`;var o=new Headers;o.append("Authorization",`Bearer ${e}`),o.append("Content-Type","application/json"),fetch(n,{method:"GET",headers:o,redirect:"follow"}).then((e=>e.text())).then((e=>{try{r(JSON.parse(e))}catch(e){i(e)}})).catch((e=>i(e)))}))})));return this._submissions[t]=i,this._submissions[t]}var r}))}static getInstance(){return o(d,r,"f",i)||s(d,r,new d,"f",i),o(d,r,"f",i)}}t.SubmissionManager=d,r=d,i={value:void 0}},5571:function(e,t,r){var i,n,o=this&&this.__awaiter||function(e,t,r,i){return new(r||(r=Promise))((function(n,o){function s(e){try{a(i.next(e))}catch(e){o(e)}}function d(e){try{a(i.throw(e))}catch(e){o(e)}}function a(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,d)}a((i=i.apply(e,t||[])).next())}))},s=this&&this.__classPrivateFieldGet||function(e,t,r,i){if("a"===r&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?i:"a"===r?i.call(e):i?i.value:t.get(e)},d=this&&this.__classPrivateFieldSet||function(e,t,r,i,n){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!n)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?n.call(e,r):n?n.value=r:t.set(e,r),r};Object.defineProperty(t,"__esModule",{value:!0}),t.TreeManager=void 0;const a=r(4518);class l{constructor(){this._formTrees={}}addTree(e,t){this._formTrees[e]=t}getFieldLogicService(){return this._fieldLogicService}getTree(e,t){return o(this,void 0,void 0,(function*(){if(this._formTrees[t])return Promise.resolve(this._formTrees[t]);{const i=yield(r={apiKey:e,formId:t},o(void 0,void 0,void 0,(function*(){const{apiKey:e,formId:t}=r;return new Promise(((r,i)=>{if(!e||!t)throw new Error(`apiKey: '${e}' or formId: '${t}'.`);const n=`https://www.formstack.com/api/v2/form/${t}`;var o=new Headers;o.append("Authorization",`Bearer ${e}`),o.append("Content-Type","application/json"),fetch(n,{method:"GET",headers:o,redirect:"follow"}).then((e=>e.text())).then((e=>{try{r(JSON.parse(e))}catch(e){i(e)}})).catch((e=>i(e)))}))})));return this._formTrees[t]=i,this._fieldLogicService=a.FormstackBuddy.getInstance().getFieldLogicService(i.fields||[]),this._formTrees[t]}var r}))}static getInstance(){return s(l,i,"f",n)||d(l,i,new l,"f",n),s(l,i,"f",n)}}t.TreeManager=l,i=l,n={value:void 0}},9048:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isFunctions=void 0,t.isFunctions={isString:e=>"string"==typeof e||e instanceof String}},1074:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractEvaluator=void 0,t.AbstractEvaluator=class{constructor(e){this._fieldJson=e,this._fieldId=e.id}get fieldId(){return this._fieldId}get fieldJson(){return structuredClone(this._fieldJson)}get fieldType(){return this.fieldJson.type.slice()}get isRequired(){const{required:e}=this.fieldJson;return"1"===e||!0===e}isValidSubmissionDatum(e){return!(["__EMPTY_SUBMISSION_DATA__","__MISSING_AND_REQUIRED__"].includes(e)||"__BAD_DATA_TYPE__ ".match(e))}getStoredValue(e){return this.isRequired&&void 0===e?"__MISSING_AND_REQUIRED__":this.isRequired||void 0!==e?this.isCorrectType(e)?e:`__BAD_DATA_TYPE__ "${typeof e}"`:"__EMPTY_SUBMISSION_DATA__"}getStatusMessageStoredValue(e){return this.wrapAsStatusMessage("info",`Stored value: '${this.getStoredValue(e)}'.`)}getStatusMessageEmptyAndRequired(){return this.wrapAsStatusMessage("warn","Submission data missing and required.  This is not an issue if the field is hidden by logic.")}createStatusMessageArrayWithStoredValue(e){return[this.getStatusMessageStoredValue(e)]}getEmptyStatusMessageArray(){return[]}getUiPopulateObjectsEmptyAndRequired(e){return e.push(this.getStatusMessageEmptyAndRequired()),[this.wrapAsUiObject(null,"",e)]}wrapAsStatusMessage(e,t,r=[],i){return{severity:e,fieldId:i||this.fieldId,message:t,relatedFieldIds:r}}wrapAsUiObject(e,t,r=[]){return{uiid:e,fieldId:this.fieldId,fieldType:this.fieldType,value:t,statusMessages:r}}}},8758:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractSubfieldEvaluator=void 0;const i=r(1074),n=e=>"string"==typeof e||e instanceof String;class o extends i.AbstractEvaluator{parseValues(e){return this.parseSubmittedData(e)}parseSubmittedData(e){if(e)return n(e)&&e.match("\n")?e.split("\n").reduce(((e,t,r,i)=>{const[n,o]=t.split("="),s=(n||"").trim(),d=(o||"").trim();return""===s&&""===d||(e[s]=d),e}),{}):{}}createStatusMessageArrayWithStoredValue(e){const t=n(e)?`Stored value: '${(e||"").replace(/\n/g,"\\n")}'.`:`Stored value: '${JSON.stringify(e)}'.`;return[{severity:"info",fieldId:this.fieldId,message:t,relatedFieldIds:[]}]}getUiPopulateObjects(e){const t=this.createStatusMessageArrayWithStoredValue(e);if(this.isRequired&&""===e||!e)return this.getUiPopulateObjectsEmptyAndRequired(t);const r=this.parseValues(e);if(this.isRequired&&(""===e||!e))return t.push(this.wrapAsStatusMessage("warn","Submission data missing and required.  This is not an issue if the field is hidden by logic.")),[this.wrapAsUiObject(null,"",t)];if(void 0===r)return[this.wrapAsUiObject(null,"",t)];if(0===Object.keys(r).length)return t.push(this.wrapAsStatusMessage("error","Failed to parse field")),[this.wrapAsUiObject(null,"",t)];Object.entries(r).forEach((([e,r])=>{this.supportedSubfieldIds.includes(e)||t.push(this.wrapAsStatusMessage("warn",`Found unexpected subfield: '${e}'. With value: '${r}'.`))}));const i=this.supportedSubfieldIds.map((e=>this.wrapAsUiObject(`field${this.fieldId}-${e}`,r[e])));return i.push(this.wrapAsUiObject(null,"",t)),i}}t.AbstractSubfieldEvaluator=o},8993:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AddressEvaluator=void 0;const i=r(8758);class n extends i.AbstractSubfieldEvaluator{constructor(){super(...arguments),this._supportedSubfieldIds=["address","address2","city","state","zip","country"]}isCorrectType(e){const t=this.parseValues(e);return"object"==typeof t&&null!==t&&Object.keys(t).length>0}_parseSubmittedData(e){return e?e.split("\n").map((e=>{const[t,r]=e.split("=");return{subfieldId:(t||"").trim(),value:(r||"").trim()}})).reduce(((e,t,r,i)=>(this._supportedSubfieldIds.includes(t.subfieldId)&&(e[t.subfieldId]=t.value),e)),{}):null}evaluateWithValues(e){return this._parseSubmittedData(e)}get supportedSubfieldIds(){return this._supportedSubfieldIds}}t.AddressEvaluator=n},1691:function(e,t,r){var i,n,o,s=this&&this.__classPrivateFieldSet||function(e,t,r,i,n){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!n)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?n.call(e,r):n?n.value=r:t.set(e,r),r},d=this&&this.__classPrivateFieldGet||function(e,t,r,i){if("a"===r&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?i:"a"===r?i.call(e):i?i.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.CheckboxEvaluator=void 0;const a=r(1074),l=r(9048);class c extends a.AbstractEvaluator{constructor(e){super(e),i.add(this),n.set(this,void 0),s(this,n,e.options||[],"f")}getSelectOptions(){return d(this,n,"f")}evaluateWithValues(e){return(this.getSelectOptions().find((t=>t.value===e))||{value:void 0}).value}getUiidFieldIdMap(){return this.getSelectOptions().reduce(((e,t,r,i)=>(e[t.value]=`field${this.fieldId}_${r+1}`,e)),{})}invalidSelectedOptionMessage(e){return`Failed to find valid option: '${e}' within valid options: '${this.validOptionValues()}'.`}getUiPopulateObjectsCheckbox(e,t){const r=[],i=this.parseArrayValues(e),n=this.getUiidFieldIdMap();return i.forEach((e=>{n[e]?r.push(this.wrapAsUiObject(n[e],e)):t.push(this.wrapAsStatusMessage("warn",this.invalidSelectedOptionMessage(e)))})),r.push(this.wrapAsUiObject(null,"",t)),r}isCorrectType(e){const t=this.parseValues(e);return l.isFunctions.isString(t)}parseArrayValues(e){return(e||"").split("\n")}parseValues(e){return e}validOptionValues(){return this.getSelectOptions().map((e=>e.value)).join("', '")}getUiPopulateObjectsSelect(e,t){const r=[],n=this.parseValues(e);return d(this,i,"m",o).call(this,n)||t.push(this.wrapAsStatusMessage("warn",this.invalidSelectedOptionMessage(n))),r.push(this.wrapAsUiObject(`field${this.fieldId}`,n,t)),r}createStatusMessageArrayWithStoredValue(e){return void 0===e&&this.isRequired?[this.wrapAsStatusMessage("warn","Stored value: '__MISSING_AND_REQUIRED__'.")]:l.isFunctions.isString(e)?[this.wrapAsStatusMessage("info",`Stored value: '${(e||"").replace(/\n/g,"\\n")}'.`)]:[this.wrapAsStatusMessage("warn",`Stored value: '__BAD_DATA_TYPE__ (${typeof e})'.`),this.wrapAsStatusMessage("warn",`stringified: ${JSON.stringify(e)}`)]}getUiPopulateObjects(e){const t=this.createStatusMessageArrayWithStoredValue(e);if(["radio","select"].includes(this.fieldType)&&!l.isFunctions.isString(e))return[this.wrapAsUiObject(null,"",t)];if(this.isRequired&&void 0===e)return this.getUiPopulateObjectsEmptyAndRequired(t);if("checkbox"===this.fieldType)return this.getUiPopulateObjectsCheckbox(e,t);if("select"===this.fieldType)return this.getUiPopulateObjectsSelect(e,t);const r=this.parseValues(e),i=this.getUiidFieldIdMap();return i[r]||t.push(this.wrapAsStatusMessage("warn",this.invalidSelectedOptionMessage(e))),[this.wrapAsUiObject(i[r]||this.fieldId,r),this.wrapAsUiObject(null,"null",t)]}}t.CheckboxEvaluator=c,n=new WeakMap,i=new WeakSet,o=function(e){return void 0!==this.getSelectOptions().find((t=>t.value===e))}},138:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DateEvaluator=void 0;const i=r(8186);class n extends i.GenericEvaluator{getUiPopulateObjects(e){const t=this.createStatusMessageArrayWithStoredValue(e);if(this.isRequired&&""===e||!e)return this.getUiPopulateObjectsEmptyAndRequired(t);const r=this.parseValues(e);if("Invalid Date"===r.toString())return t.push(this.wrapAsStatusMessage("error",`Failed to parse field. Date did not parse correctly. Date: '${e}'`)),[this.wrapAsUiObject(null,"",t)];Math.abs(r.getTime())<864e5&&t.push(this.wrapAsStatusMessage("info",`This date is near the epoch.  This could suggest malformed date string. Date: '${r.toDateString()}' `));const i=r.toDateString().split(" ")[1]||"";return[this.wrapAsUiObject(`field${this.fieldId}M`,i),this.wrapAsUiObject(`field${this.fieldId}D`,(r.getDate()+"").padStart(2,"0")),this.wrapAsUiObject(`field${this.fieldId}Y`,r.getFullYear()+1+""),this.wrapAsUiObject(`field${this.fieldId}H`,(r.getHours()+"").padStart(2,"0")),this.wrapAsUiObject(`field${this.fieldId}I`,(r.getMinutes()+"").padStart(2,"0")),this.wrapAsUiObject(`field${this.fieldId}A`,r.getHours()>12?"PM":"AM"),this.wrapAsUiObject(null,"",t)]}isCorrectType(e){return"Invalid Date"!==this.parseValues(e).toString()}parseValues(e){return new Date(e)}}t.DateEvaluator=n},1737:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Evaluator=void 0;const i=r(8993),n=r(8186),o=r(1689),s=r(844),d=r(5078),a=r(1511),l=r(7961),c=r(3578),u=r(7470),h=r(138),p=r(1691);t.Evaluator=class{static getEvaluatorWithFieldJson(e){switch(e.type){case"address":return new i.AddressEvaluator(e);case"name":return new d.NameEvaluator(e);case"matrix":return new l.MatrixEvaluator(e);case"product":return new u.ProductEvaluator(e);case"number":case"rating":return new s.NumericOnlyEvaluator(e);case"checkbox":return new p.CheckboxEvaluator(e);case"radio":case"select":return new o.MultiSelectEvaluator(e);case"datetime":return new h.DateEvaluator(e);case"email":case"file":case"phone":case"signature":case"text":case"textarea":return new n.GenericEvaluator(e);case"creditcard":case"embed":case"richtext":case"section":return new c.NonValueEvaluator(e);default:throw new a.FieldTypeUnknownError(`Unknown field type: '${e.type}'.`)}}}},8186:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GenericEvaluator=void 0;const i=r(1074);class n extends i.AbstractEvaluator{parseValues(e){return e}evaluateWithValues(e){return this.parseValues(e)}getUiPopulateObjects(e){const t=this.createStatusMessageArrayWithStoredValue(e);if(this.isRequired&&(""===e||!e))return this.getUiPopulateObjectsEmptyAndRequired(t);const r=this.getStoredValue(e);return[this.wrapAsUiObject(this.isValidSubmissionDatum(r)?`field${this.fieldId}`:null,this.isValidSubmissionDatum(r)?r:"",t)]}isCorrectType(e){return"string"==typeof(t=this.parseValues(e))||t instanceof String;var t}}t.GenericEvaluator=n},7961:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MatrixEvaluator=void 0;const i=r(1074);class n extends i.AbstractEvaluator{evaluateWithValues(e){return this.parseSubmittedData(e)}getAsMatrixUiFieldIdMap(){const e=this.fieldJson.row_choices.split("\n"),t=this.fieldJson.column_choices.split("\n"),r={};return e.forEach(((e,i)=>{r[e]={},t.forEach(((t,n)=>{r[e][t]=`field${this.fieldId}-${i+1}-${n+1}`}))})),r}getUiPopulateObjects(e){const t=this.createStatusMessageArrayWithStoredValue(e);if(this.isRequired&&""===e||!e)return this.getUiPopulateObjectsEmptyAndRequired(t);const r=this.parseSubmittedData(e),i=this.getAsMatrixUiFieldIdMap();if(void 0===r)return t.push(this.wrapAsStatusMessage("info","Failed to parse field. ")),[this.wrapAsUiObject(null,"",t)];const n=Object.entries(r).filter((([e,r])=>{const n=i[e][r];return void 0===n&&t.push(this.wrapAsStatusMessage("warn",`Unable to find matrix mapping for: '${JSON.stringify({row:e,column:r})}'.`)),n})).map((([e,t])=>{const r=i[e][t];return this.wrapAsUiObject(r||null,"checked")}))||[];return n.push(this.wrapAsUiObject(null,"",t)),n}isCorrectType(e){const t=this.parseValues(e);return"object"==typeof t&&null!==t&&Object.keys(t).length>0}parseSubmittedData(e){var t;if(e)return("string"==typeof(t=e)||t instanceof String)&&e.match("\n")?e.split("\n").reduce(((e,t,r,i)=>{const[n,o]=t.split("="),s=(n||"").trim(),d=(o||"").trim();return""===s&&""===d||(e[s]=d),e}),{}):{}}parseValues(e){return this.parseSubmittedData(e)}}t.MatrixEvaluator=n},1689:function(e,t,r){var i,n,o=this&&this.__classPrivateFieldGet||function(e,t,r,i){if("a"===r&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?i:"a"===r?i.call(e):i?i.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.MultiSelectEvaluator=void 0;const s=r(1074),d=r(9048);class a extends s.AbstractEvaluator{constructor(e){super(e),i.add(this),this._fieldSelectOptions=e.options||[]}isValueInSelectOptions(e){return void 0!==o(this,i,"m",n).call(this).find((t=>t.value===e))}evaluateWithValues(e){return(o(this,i,"m",n).call(this).find((t=>t.value===e))||{value:void 0}).value}getUiidFieldIdMap(){return o(this,i,"m",n).call(this).reduce(((e,t,r,i)=>(e[t.value]=`field${this.fieldId}_${r+1}`,e)),{})}invalidSelectedOptionMessage(e){return`Failed to find valid option: '${e}' within valid options: '${this.validOptionValues()}'.`}isCorrectType(e){const t=this.parseValues(e);return d.isFunctions.isString(t)}parseValues(e){return e}validOptionValues(){return o(this,i,"m",n).call(this).map((e=>e.value)).join("', '")}createStatusMessageArrayWithStoredValue(e){return void 0===e&&this.isRequired?[this.wrapAsStatusMessage("warn","Stored value: '__MISSING_AND_REQUIRED__'."),this.wrapAsStatusMessage("warn",this.invalidSelectedOptionMessage(e))]:d.isFunctions.isString(e)?[this.wrapAsStatusMessage("info",`Stored value: '${(e||"").replace(/\n/g,"\\n")}'.`)]:[this.wrapAsStatusMessage("warn",`Stored value: '__BAD_DATA_TYPE__ (${typeof e})'.`),this.wrapAsStatusMessage("warn",`stringified: ${JSON.stringify(e)}`)]}getUiPopulateObjects(e){const t=this.createStatusMessageArrayWithStoredValue(e);if(!d.isFunctions.isString(e))return[this.wrapAsUiObject(null,"",t)];if("select"===this.fieldType)return this.getUiPopulateObjectsSelect(e,t);const r=this.parseValues(e),i=this.getUiidFieldIdMap();return i[r]||t.push(this.wrapAsStatusMessage("warn",this.invalidSelectedOptionMessage(e))),[this.wrapAsUiObject(i[r]||this.fieldId,r),this.wrapAsUiObject(null,"null",t)]}getUiPopulateObjectsSelect(e,t){const r=this.parseValues(e);return this.isValueInSelectOptions(r)?[this.wrapAsUiObject(`field${this.fieldId}`,r,t)]:(t.push(this.wrapAsStatusMessage("warn",this.invalidSelectedOptionMessage(r))),[this.wrapAsUiObject(null,"",t)])}}t.MultiSelectEvaluator=a,i=new WeakSet,n=function(){return this._fieldSelectOptions}},5078:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.NameEvaluator=void 0;const i=r(8758);class n extends i.AbstractSubfieldEvaluator{constructor(){super(...arguments),this._supportedSubfieldIds=["first","last","initial","prefix","suffix","middle"]}get supportedSubfieldIds(){return this._supportedSubfieldIds}evaluateWithValues(e){return this.parseValues(e)}isCorrectType(e){const t=this.parseValues(e);return"object"==typeof t&&null!==t&&Object.keys(t).length>0}}t.NameEvaluator=n},3578:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.NonValueEvaluator=void 0;const i=r(1074);class n extends i.AbstractEvaluator{evaluateWithValues(e){return null}getUiPopulateObjects(e){return[this.wrapAsUiObject(null,"",[this.wrapAsStatusMessage("debug",'Sections may have statusMessages but they will never get "parsed".')])]}isCorrectType(e){return!0}parseValues(e){return e}}t.NonValueEvaluator=n},844:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.NumericOnlyEvaluator=void 0;const i=r(1074),n=e=>Number(e)==e;class o extends i.AbstractEvaluator{evaluateWithValues(e){if(n(e))return e}getUiPopulateObjects(e){const t=this.createStatusMessageArrayWithStoredValue(e);if(this.isRequired&&""===e||!e)return this.getUiPopulateObjectsEmptyAndRequired(t);const r=this.parseValues(e);return[this.wrapAsUiObject(`field${this.fieldId}`,r,t)]}isCorrectType(e){return"string"==typeof(t=e)||t instanceof String||n(e);var t}parseValues(e){return e}}t.NumericOnlyEvaluator=o},7470:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ProductEvaluator=void 0;const i=r(8758);class n extends i.AbstractSubfieldEvaluator{constructor(){super(...arguments),this._supportedSubfieldIds=["charge_type","quantity","unit_price","total"]}evaluateWithValues(e){return this.parseValues(e)}isCorrectType(e){const t=this.parseValues(e);return"object"==typeof t&&null!==t&&Object.keys(t).length>0}get supportedSubfieldIds(){return this._supportedSubfieldIds}getUiPopulateObjects(e){const t=this.createStatusMessageArrayWithStoredValue(e);if(this.isRequired&&""===e||!e)return this.getUiPopulateObjectsEmptyAndRequired(t);const r=this.parseValues(e);void 0===r&&t.push(this.wrapAsStatusMessage("error","Failed to parse field. "));const i=Array.isArray(r)?r.reduce(((e,t,r,i)=>(e[t.subfieldId]=t.value,e)),{}):{};return[this.wrapAsUiObject(`field${this.fieldId}`,i.quantity,t)]}}t.ProductEvaluator=n},8468:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.webInterfaceEvaluator=t.Evaluator=void 0;const i=r(1737);var n=r(1737);Object.defineProperty(t,"Evaluator",{enumerable:!0,get:function(){return n.Evaluator}}),t.webInterfaceEvaluator=i.Evaluator},4145:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FsTreeFieldCollection=void 0;const i=r(4925),n=r(9537),o=r(4656),s=r(6182),d=r(6838),a=r(8095),l=r(6167),c=r(2528),u=r(8053);class h extends i.AbstractExpressionTree{constructor(){super(...arguments),this._dependantFieldIds=[],this._fieldIdNodeMap={}}createSubtreeAt(e){const t=new h("_subtree_"),r=this.appendChildNodeWithContent(e,t);return i.AbstractExpressionTree.reRootTreeAt(t,t.rootNodeId,r),t._rootNodeId=r,t._incrementor=this._incrementor,t}getFormFieldsCount(){return this.getAllFieldIds().length}getAllFieldIds(){return Object.keys(this._fieldIdNodeMap)}getFieldById(e){return this._fieldIdNodeMap[e]}getExtendedTree(e,t,r){const i=e.getLogicTree();if(null===i){if(void 0!==r)return r.appendChildNodeWithContent(t||r.rootNodeId,new a.FsLogicLeafNode(e.fieldId,"condition","option")),r;{const t=new n.FsTreeLogicDeep(e.fieldId,new a.FsLogicLeafNode(e.fieldId,"condition","option"));return t.ownerFieldId=e.fieldId,t}}const o=i.getChildContentAt(i.rootNodeId);let s,d;const{conditional:p,action:f,fieldJson:g}=o,_=new u.FsLogicBranchNode(e.fieldId,p||"$and",f||null,g);if(void 0===r){const{conditional:r,action:i,fieldJson:a}=o;s=new n.FsTreeLogicDeep(e.fieldId,_),s.ownerFieldId=e.fieldId,t=s.rootNodeId,d=s.rootNodeId}else s=r,d=s.appendChildNodeWithContent(t||"",_);return s.getTreeNodeIdsAt(s.rootNodeId).length>h.MAX_DEPTH?(s.appendChildNodeWithContent(d,new c.FsMaxDepthExceededNode),s):(i.getChildrenNodeIdsOf(i.rootNodeId).forEach((e=>{const r=i.getChildContentAt(e),n=this.getFieldTreeByFieldId(r.fieldId);if(s.isExistInDependencyChain(n))s.appendChildNodeWithContent(d,new l.FsCircularDependencyNode(s.ownerFieldId,n.fieldId,s.getDependantFieldIds()));else if(null===n.getLogicTree()){const{fieldId:e,condition:t,option:i}=r;s.appendChildNodeWithContent(d,new a.FsLogicLeafNode(e,t,i))}else this.getExtendedTree(n,t,s)})),s)}aggregateLogicTree(e){const t=this.getFieldTreeByFieldId(e);return this.getExtendedTree(t)}getFieldTreeByFieldId(e){return this._fieldIdNodeMap[e]}getFieldIdsWithCircularLogic(){return Object.keys(this._fieldIdNodeMap).filter((e=>this.aggregateLogicTree(e).getCircularLogicNodes().length>0))}evaluateWithValues(e){return Object.entries(this._fieldIdNodeMap).map((([t,r])=>r.evaluateWithValues(e)))}getDependantFields(){return this._dependantFieldIds.slice()}getFieldsBySection(e){return this.getChildrenContentOf(this.rootNodeId).filter((t=>{const{fieldId:r,field:i}=t,n=i.getVisibilityNode();return Object.is(null==n?void 0:n.parentNode,e)})).map((e=>e.field))}getEvaluatorByFieldId(e){return this.getFieldById(e).getSubmissionEvaluator()}getUiPopulateObject(e){const t=e.data.reduce(((e,t)=>(e[t.field]=t.value,e)),{});return this.getAllFieldIds().map((e=>this.getEvaluatorByFieldId(e).getUiPopulateObjects(t[e]))).reduce(((e,t)=>(e.push(...t),e)),[])}static fromFieldJson(e,t="_FORM_ID_"){const r=new h(t,new d.FsFormRootNode(t));(e||[]).forEach((e=>{const t=o.FsTreeField.fromFieldJson(s.transformers.fieldJson(e));r.appendChildNodeWithContent(r.rootNodeId,{fieldId:t.fieldId,field:t})})),r.getChildrenContentOf(r.rootNodeId).forEach((e=>{const{fieldId:t,field:i}=e;r._fieldIdNodeMap[t]=i}));const i=r.getChildrenContentOf(r.rootNodeId).sort(p);let n=null;for(let e of i){const{fieldId:t,field:r}=e,{type:i}=null==r?void 0:r.fieldJson;if(i&&"section"===i)n=r;else if(n instanceof o.FsTreeField){const e=e=>n.evaluateWithValues(e)||!1;r.appendChildNodeWithContent(r.rootNodeId,new d.FsFieldVisibilityLinkNode(e,n))}}return r}}t.FsTreeFieldCollection=h,h.MAX_DEPTH=50;const p=(e,t)=>{const r=e.field.fieldJson,i=t.field.fieldJson;if(void 0===r.sort||void 0===i.sort)return 1;const n=parseInt(r.sort+""),o=parseInt(i.sort+"");return n>o?1:n<o?-1:0}},2225:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FsTreeFieldCollection=t.FsTreeLogicDeep=void 0;var i=r(9537);Object.defineProperty(t,"FsTreeLogicDeep",{enumerable:!0,get:function(){return i.FsTreeLogicDeep}});var n=r(4145);Object.defineProperty(t,"FsTreeFieldCollection",{enumerable:!0,get:function(){return n.FsTreeFieldCollection}})},9069:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractFsTreeGeneric=void 0;const i=r(4925);class n extends i.AbstractExpressionTree{getDependantFieldIds(){return[]}get fieldJson(){return this._fieldJson}findAllNodesOfType(e){return this.getTreeNodeIdsAt(this.rootNodeId).filter((t=>this.getChildContentAt(t)instanceof e)).map((e=>this.getChildContentAt(e)))}createSubtreeFromFieldJson(e,t,r){const n=r?r("_subtree_",t):new o(e),s=this.appendChildNodeWithContent(e,n);return i.AbstractExpressionTree.reRootTreeAt(n,n.rootNodeId,s),n._rootNodeId=s,n._incrementor=this._incrementor,n}static fromEmpty(e,t){return new o(e,t)}}t.AbstractFsTreeGeneric=n;class o extends i.AbstractExpressionTree{createSubtreeAt(e){return new o(e)}}},3769:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractFsTreeLogic=void 0;const i=r(9069);class n extends i.AbstractFsTreeGeneric{get action(){return this._action}set ownerFieldId(e){this._ownerFieldId=e}get ownerFieldId(){return this._ownerFieldId}}t.AbstractFsTreeLogic=n},6149:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.FsTreeCalcString=void 0;const AbstractFsTreeGeneric_1=__webpack_require__(9069);class FsTreeCalcString extends AbstractFsTreeGeneric_1.AbstractFsTreeGeneric{constructor(){super(...arguments),this._dependantFieldIds=[]}createSubtreeAt(e){return new FsTreeCalcString}evaluateWithValues(values){let calcString=this._fieldJson;return this._dependantFieldIds.forEach((e=>{calcString=calcString.replace(`[${e}]`,`${values[e]}`)})),eval(calcString)}getDependantFieldIds(){return this._dependantFieldIds.slice()}static fromFieldJson(e){const t={operator:"*"},r=new FsTreeCalcString(e.id||"_calc_tree_",t);r._fieldJson=e.calculation||null,r.replaceNodeContent(r.rootNodeId,t);const{operators:i,fieldIds:n}=calcStringToOperatorsAndFieldIds(e.calculation);return i.forEach((e=>{const t=r.appendChildNodeWithContent(r.rootNodeId,{operator:e});n.forEach((()=>{r.appendChildNodeWithContent(t,{operator:e})}))})),r._dependantFieldIds.push(...n),r}}exports.FsTreeCalcString=FsTreeCalcString;const calcStringToOperatorsAndFieldIds=e=>{const t=[],r=[],i=/\[(\d+)\]/g;if(!e||""===e)return{operators:[],fieldIds:[]};let n;for(;n=i.exec(e);){const e=n[1];t.push(e)}const o=/[-+*/]/g;for(;n=o.exec(e);){const e=n[0];r.push(e)}return{operators:r,fieldIds:t}}},4656:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FsTreeField=void 0;const i=r(4925),n=r(6149),o=r(1e3),s=r(4696),d=r(9069),a=r(2707),l=r(8468);class c extends d.AbstractFsTreeGeneric{constructor(){super(...arguments),this._dependantFieldIds=[]}createSubtreeAt(e){const t=new c("_subtree_"),r=this.appendChildNodeWithContent(e,t);return i.AbstractExpressionTree.reRootTreeAt(t,t.rootNodeId,r),t._rootNodeId=r,t._incrementor=this._incrementor,t}get fieldJson(){return this._fieldJson}get fieldId(){return this._fieldId}get fieldType(){return this._fieldJson.type}get section_heading(){return this._fieldJson.section_heading}get label(){return this._fieldJson.label}getNodesOfType(e){return this.getTreeNodeIdsAt(this.rootNodeId).filter((t=>this.getChildContentAt(t)instanceof e)).map((e=>this.getChildContentAt(e)))}getSingleTreeOfType(e){const t=this.getSubtreeIdsAt(this.rootNodeId).filter((t=>this.getChildContentAt(t)instanceof e)).map((e=>this.getChildContentAt(e)));if(t.length>1)throw new a.MultipleLogicTreeError(`field with id: '${this.fieldId}' appears to have multiple logic tree(s) or multiple calc tree(s).`);return t.pop()||null}getLogicTree(){return this.getSingleTreeOfType(o.FsTreeLogic)}getVisibilityNode(){const e=this.getNodesOfType(s.FsFieldVisibilityLinkNode);return e&&0!==(null==e?void 0:e.length)?e&&(null==e?void 0:e.length)>1?null:e.pop()||null:null}getCalcStringTree(){return this.getSingleTreeOfType(n.FsTreeCalcString)}evaluateShowHide(e={}){}evaluateWithValues(e){if(null===this.getLogicTree()){const t=l.Evaluator.getEvaluatorWithFieldJson(this.fieldJson);return{[this.fieldId]:t.evaluateWithValues(e[this.fieldId])}}return e[this.fieldId]}getSubmissionEvaluator(){return l.Evaluator.getEvaluatorWithFieldJson(this.fieldJson)}x_evaluateMultiSelect(e){const t=(this.fieldJson.options||[]).find((t=>t.value===e[this.fieldId]));return{[this.fieldId]:(t||{}).value}}x_evaluateByFieldType(e){const t=l.Evaluator.getEvaluatorWithFieldJson(this.fieldJson);return{[this.fieldId]:t.evaluateWithValues(e[this.fieldId])}}getVisibilityLogicChain(){}getInterdependentFieldIdsOf(e){return this.getLogicTree(),[]}isLeaf(){return null===this.getLogicTree()}isInterdependentOf(e){return this.getInterdependentFieldIdsOf(e).length>0}getDependantFieldIds(){var e,t;const r=(null===(e=this.getLogicTree())||void 0===e?void 0:e.getDependantFieldIds())||[],i=(null===(t=this.getCalcStringTree())||void 0===t?void 0:t.getDependantFieldIds())||[];return r.concat(i)}static fromFieldJson(e){const t=new c("_FIELD_ID_",{fieldId:e.id,label:e.label,fieldJson:e});if(t._fieldId=e.id||"_MISSING_ID_",t._fieldJson=e,e.calculation){const r=e=>n.FsTreeCalcString.fromFieldJson(e);c.createSubtreeFromFieldJson(t,t.rootNodeId,e,r)}if(e.logic){const r=e=>o.FsTreeLogic.fromFieldJson(e);c.createSubtreeFromFieldJson(t,t.rootNodeId,e,r)}return t}static createSubtreeFromFieldJson(e,t,r,n){const o=n?n(r):new c(t),s=e.appendChildNodeWithContent(t,o);return i.AbstractExpressionTree.reRootTreeAt(o,o.rootNodeId,s),o._rootNodeId=s,o._incrementor=e._incrementor,o}}t.FsTreeField=c},1e3:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FsTreeLogic=void 0;const i=r(4925),n=r(3769),o=(e,t)=>e&&t,s=(e,t)=>e||t;class d extends n.AbstractFsTreeLogic{constructor(){super(...arguments),this._debug_visitedFieldIds=[]}createSubtreeAt(e){return new d}getDependantFieldIds(){return this.getShallowDependantFieldIds()}getShallowDependantFieldIds(){return this.getChildrenContentOf(this.rootNodeId).map((e=>e.fieldId?e.fieldId:e.ownerFieldId))}evaluateWithValues(e){const t=this.getChildContentAt(this.rootNodeId),{conditional:r}=t,i=this.getChildrenContentOf(this.rootNodeId).map((t=>{switch(t.condition){case"==":return e[t.fieldId]===t.option;case"gt":return t.option&&e[t.fieldId]>t.option}}));return"$and"===r?i.reduce(o,!0):"$or"===r?i.reduce(s,!1):void 0}evaluateShowHide(e){return this.evaluateWithValues(e)?this.action:null}x_setActionAndOwnerFieldIDAndJson(e="Show",t,r){this._action=e,this._fieldJson=t,this._ownerFieldId=r}static fromFieldJson(e){const t=e.logic,{action:r,conditional:i}=t,n={fieldId:e.id||"__MISSING_ID__",conditional:i,action:r||"Show",logicJson:t},o=new d(e.id||"_calc_tree_",n);o._action=r||null,o._fieldJson=t,o._ownerFieldId=e.id||"_calc_tree_";const{leafExpressions:s}=a(o.fieldJson);return s.forEach((e=>{o.appendChildNodeWithContent(o.rootNodeId,e)})),o}static createSubtreeFromFieldJson(e,t,r,n){const o=n?n(r):new d(t),s=r.logic,{action:l,conditional:c}=s;o._action=l||null,o._fieldJson=s;const u={action:l,conditional:c,fieldJson:s,checks:void 0};o.replaceNodeContent(o.rootNodeId,u);const h=e.appendChildNodeWithContent(t,o);i.AbstractExpressionTree.reRootTreeAt(o,o.rootNodeId,h),o._rootNodeId=h,o._incrementor=e._incrementor;const{leafExpressions:p}=a(o.fieldJson);return p.forEach((e=>{o.appendChildNodeWithContent(o.rootNodeId,e)})),o}}t.FsTreeLogic=d;const a=e=>{const{action:t,conditional:r,checks:i}=e||{};return{leafExpressions:(i||[]).map((e=>{const{condition:t,field:r,option:i}=e;return{fieldId:r+""||"__MISSING_ID__",fieldJson:e,condition:l(e),option:i}}))}},l=e=>e.condition},9537:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FsTreeLogicDeep=void 0;const i=r(3769),n=r(6167),o=r(8053),s=r(8095);class d extends i.AbstractFsTreeLogic{constructor(){super(...arguments),this._dependantFieldIds=[]}createSubtreeAt(e){return new d}extractFieldIdFromNodeContent(e){return e instanceof o.FsLogicBranchNode?e.ownerFieldId:e instanceof s.FsLogicLeafNode?e.fieldId:null}getDependantFieldIds(){return this._dependantFieldIds.slice()}getDependentFieldIds(){return this.getTreeContentAt(this.rootNodeId,!0).filter((e=>e instanceof o.FsLogicBranchNode||e instanceof s.FsLogicLeafNode)).map((e=>e instanceof o.FsLogicBranchNode?e.ownerFieldId||"_MISSING_FIELD_ID_":e.fieldId))}isInDependentsFields(e){return this._dependantFieldIds.includes(e)}getCircularLogicNodes(){return this.findAllNodesOfType(n.FsCircularDependencyNode)}appendChildNodeWithContent(e,t){return this._dependantFieldIds.push(this.extractFieldIdFromNodeContent(t)),super.appendChildNodeWithContent(e,t)}static fromFieldJson(e){const t=e.logic,{action:r,conditional:i}=t,n=new o.FsLogicBranchNode(e.id||"__MISSING_ID__",i,r||"Show",t),l=new d(e.id||"_calc_tree_",n);l._action=r||null,l._fieldJson=t,l._ownerFieldId=e.id||"_calc_tree_";const{leafExpressions:c}=a(l.fieldJson);return c.forEach((e=>{const{condition:t,fieldId:r,option:i}=e,n=new s.FsLogicLeafNode(r,t,i);l.appendChildNodeWithContent(l.rootNodeId,n)})),l}isExistInDependencyChain(e){return this.ownerFieldId===e.fieldId||this.isInDependentsFields(e.fieldId)}}t.FsTreeLogicDeep=d;const a=e=>{const{action:t,conditional:r,checks:i}=e||{};return{leafExpressions:(i||[]).map((e=>{const{condition:t,field:r,option:i}=e;return{fieldId:r+""||"__MISSING_ID__",fieldJson:e,condition:e.condition,option:i}}))}}},1405:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractNode=void 0,t.AbstractNode=class{}},6167:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FsCircularDependencyNode=void 0,t.FsCircularDependencyNode=class{constructor(e,t,r){this._sourceFieldId=e,this._targetFieldId=t,this._dependentChainFieldIds=r}getLastVisitedFieldId(){return this._targetFieldId}get dependentChainFieldIds(){return[this._sourceFieldId,...this._dependentChainFieldIds.slice(),this._targetFieldId]}}},4696:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FsFieldVisibilityLinkNode=void 0;const i=r(1405);class n extends i.AbstractNode{constructor(e,t){super(),this._isUltimatelyFn=e,this._parentNode=t}get parentNode(){return this._parentNode}get isUltimately(){return this._isUltimatelyFn}}t.FsFieldVisibilityLinkNode=n},1962:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FsFormRootNode=void 0,t.FsFormRootNode=class{constructor(e="_FORM_ID_"){this._formId=e}get formId(){return this._formId}}},8053:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FsLogicBranchNode=void 0;const i=r(1405);class n extends i.AbstractNode{constructor(e,t="$and",r,i){super(),this._ownerFieldId=e,this._conditional=t,this._action=r,this._fieldJson=i}get ownerFieldId(){return this._ownerFieldId}get conditional(){return this._conditional}get action(){return this._action}get fieldJson(){return this._fieldJson}}t.FsLogicBranchNode=n},8095:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FsLogicLeafNode=void 0;const i=r(1405);class n extends i.AbstractNode{constructor(e,t,r){super(),this._fieldId=e,this._condition=t,this._option=r}get fieldId(){return this._fieldId}get condition(){return this._condition}get option(){return this._option}}t.FsLogicLeafNode=n},2528:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FsMaxDepthExceededNode=void 0,t.FsMaxDepthExceededNode=class{}},6838:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FsFormRootNode=t.FsFieldVisibilityLinkNode=void 0;var i=r(4696);Object.defineProperty(t,"FsFieldVisibilityLinkNode",{enumerable:!0,get:function(){return i.FsFieldVisibilityLinkNode}});var n=r(1962);Object.defineProperty(t,"FsFormRootNode",{enumerable:!0,get:function(){return n.FsFormRootNode}})},1511:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FieldTypeUnknownError=void 0;class r extends Error{constructor(e,t){super(e),this._debugObject=t,this.name=this.constructor.name}get code(){return"ERR_UNKNOWN_FIELD_TYPE"}get debugObject(){return this._debugObject}}t.FieldTypeUnknownError=r},2707:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MultipleLogicTreeError=void 0;class r extends Error{constructor(e,t){super(e),this._debugObject=t,this.name=this.constructor.name}get code(){return"ERR_MULTIPLE_LOGIC_TREE"}get debugObject(){return this._debugObject}}t.MultipleLogicTreeError=r},3228:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FsTreeFieldCollection=t.FsTreeLogicDeep=void 0;var i=r(2225);Object.defineProperty(t,"FsTreeLogicDeep",{enumerable:!0,get:function(){return i.FsTreeLogicDeep}});var n=r(2225);Object.defineProperty(t,"FsTreeFieldCollection",{enumerable:!0,get:function(){return n.FsTreeFieldCollection}})},8909:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TApiFormFromJson=void 0;const i=r(1879);t.TApiFormFromJson=e=>{const t=(e.fields||[]).map((e=>(0,i.TFsFieldAnyFromJson)(e)));return Object.assign({fields:t},e)}},1879:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TFsFieldAnyFromJson=void 0;const i=r(8266);t.TFsFieldAnyFromJson=e=>{const t=null===e.logic?null:(0,i.TFsFieldLogicJunctionFromJson)(e.logic,e.id||"_MISSING_ID_");return Object.assign({logic:t},e)}},8266:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TFsFieldLogicJunctionFromJson=void 0,t.TFsFieldLogicJunctionFromJson=(e,t)=>{var i,n;return{fieldJson:e,action:["SHOW","HIDE"].includes((null===(i=null==e?void 0:e.action)||void 0===i?void 0:i.toUpperCase())||"")?r((null===(n=null==e?void 0:e.action)||void 0===n?void 0:n.toLocaleLowerCase())||""):null,conditional:"any"===e.conditional?"$or":"$and",ownerFieldId:t}};const r=(e="")=>e.charAt(0).toUpperCase()+e.slice(1)},6182:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.transformers=void 0;const i=r(8909),n=r(1879),o=r(8266);t.transformers={formJson:i.TApiFormFromJson,fieldJson:n.TFsFieldAnyFromJson,logicJunctionJson:o.TFsFieldLogicJunctionFromJson}},1614:(e,t,r)=>{var i;r.r(t),r.d(t,{NIL:()=>E,parse:()=>_,stringify:()=>c,v1:()=>g,v3:()=>A,v4:()=>S,v5:()=>F,validate:()=>d,version:()=>j});var n=new Uint8Array(16);function o(){if(!i&&!(i="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return i(n)}const s=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,d=function(e){return"string"==typeof e&&s.test(e)};for(var a=[],l=0;l<256;++l)a.push((l+256).toString(16).substr(1));const c=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=(a[e[t+0]]+a[e[t+1]]+a[e[t+2]]+a[e[t+3]]+"-"+a[e[t+4]]+a[e[t+5]]+"-"+a[e[t+6]]+a[e[t+7]]+"-"+a[e[t+8]]+a[e[t+9]]+"-"+a[e[t+10]]+a[e[t+11]]+a[e[t+12]]+a[e[t+13]]+a[e[t+14]]+a[e[t+15]]).toLowerCase();if(!d(r))throw TypeError("Stringified UUID is invalid");return r};var u,h,p=0,f=0;const g=function(e,t,r){var i=t&&r||0,n=t||new Array(16),s=(e=e||{}).node||u,d=void 0!==e.clockseq?e.clockseq:h;if(null==s||null==d){var a=e.random||(e.rng||o)();null==s&&(s=u=[1|a[0],a[1],a[2],a[3],a[4],a[5]]),null==d&&(d=h=16383&(a[6]<<8|a[7]))}var l=void 0!==e.msecs?e.msecs:Date.now(),g=void 0!==e.nsecs?e.nsecs:f+1,_=l-p+(g-f)/1e4;if(_<0&&void 0===e.clockseq&&(d=d+1&16383),(_<0||l>p)&&void 0===e.nsecs&&(g=0),g>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");p=l,f=g,h=d;var v=(1e4*(268435455&(l+=122192928e5))+g)%4294967296;n[i++]=v>>>24&255,n[i++]=v>>>16&255,n[i++]=v>>>8&255,n[i++]=255&v;var b=l/4294967296*1e4&268435455;n[i++]=b>>>8&255,n[i++]=255&b,n[i++]=b>>>24&15|16,n[i++]=b>>>16&255,n[i++]=d>>>8|128,n[i++]=255&d;for(var I=0;I<6;++I)n[i+I]=s[I];return t||c(n)},_=function(e){if(!d(e))throw TypeError("Invalid UUID");var t,r=new Uint8Array(16);return r[0]=(t=parseInt(e.slice(0,8),16))>>>24,r[1]=t>>>16&255,r[2]=t>>>8&255,r[3]=255&t,r[4]=(t=parseInt(e.slice(9,13),16))>>>8,r[5]=255&t,r[6]=(t=parseInt(e.slice(14,18),16))>>>8,r[7]=255&t,r[8]=(t=parseInt(e.slice(19,23),16))>>>8,r[9]=255&t,r[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,r[11]=t/4294967296&255,r[12]=t>>>24&255,r[13]=t>>>16&255,r[14]=t>>>8&255,r[15]=255&t,r};function v(e,t,r){function i(e,i,n,o){if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));for(var t=[],r=0;r<e.length;++r)t.push(e.charCodeAt(r));return t}(e)),"string"==typeof i&&(i=_(i)),16!==i.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var s=new Uint8Array(16+e.length);if(s.set(i),s.set(e,i.length),(s=r(s))[6]=15&s[6]|t,s[8]=63&s[8]|128,n){o=o||0;for(var d=0;d<16;++d)n[o+d]=s[d];return n}return c(s)}try{i.name=e}catch(e){}return i.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",i.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",i}function b(e){return 14+(e+64>>>9<<4)+1}function I(e,t){var r=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(r>>16)<<16|65535&r}function y(e,t,r,i,n,o){return I((s=I(I(t,e),I(i,o)))<<(d=n)|s>>>32-d,r);var s,d}function m(e,t,r,i,n,o,s){return y(t&r|~t&i,e,t,n,o,s)}function w(e,t,r,i,n,o,s){return y(t&i|r&~i,e,t,n,o,s)}function N(e,t,r,i,n,o,s){return y(t^r^i,e,t,n,o,s)}function T(e,t,r,i,n,o,s){return y(r^(t|~i),e,t,n,o,s)}const A=v("v3",48,(function(e){if("string"==typeof e){var t=unescape(encodeURIComponent(e));e=new Uint8Array(t.length);for(var r=0;r<t.length;++r)e[r]=t.charCodeAt(r)}return function(e){for(var t=[],r=32*e.length,i="0123456789abcdef",n=0;n<r;n+=8){var o=e[n>>5]>>>n%32&255,s=parseInt(i.charAt(o>>>4&15)+i.charAt(15&o),16);t.push(s)}return t}(function(e,t){e[t>>5]|=128<<t%32,e[b(t)-1]=t;for(var r=1732584193,i=-271733879,n=-1732584194,o=271733878,s=0;s<e.length;s+=16){var d=r,a=i,l=n,c=o;r=m(r,i,n,o,e[s],7,-680876936),o=m(o,r,i,n,e[s+1],12,-389564586),n=m(n,o,r,i,e[s+2],17,606105819),i=m(i,n,o,r,e[s+3],22,-1044525330),r=m(r,i,n,o,e[s+4],7,-176418897),o=m(o,r,i,n,e[s+5],12,1200080426),n=m(n,o,r,i,e[s+6],17,-1473231341),i=m(i,n,o,r,e[s+7],22,-45705983),r=m(r,i,n,o,e[s+8],7,1770035416),o=m(o,r,i,n,e[s+9],12,-1958414417),n=m(n,o,r,i,e[s+10],17,-42063),i=m(i,n,o,r,e[s+11],22,-1990404162),r=m(r,i,n,o,e[s+12],7,1804603682),o=m(o,r,i,n,e[s+13],12,-40341101),n=m(n,o,r,i,e[s+14],17,-1502002290),r=w(r,i=m(i,n,o,r,e[s+15],22,1236535329),n,o,e[s+1],5,-165796510),o=w(o,r,i,n,e[s+6],9,-1069501632),n=w(n,o,r,i,e[s+11],14,643717713),i=w(i,n,o,r,e[s],20,-373897302),r=w(r,i,n,o,e[s+5],5,-701558691),o=w(o,r,i,n,e[s+10],9,38016083),n=w(n,o,r,i,e[s+15],14,-660478335),i=w(i,n,o,r,e[s+4],20,-405537848),r=w(r,i,n,o,e[s+9],5,568446438),o=w(o,r,i,n,e[s+14],9,-1019803690),n=w(n,o,r,i,e[s+3],14,-187363961),i=w(i,n,o,r,e[s+8],20,1163531501),r=w(r,i,n,o,e[s+13],5,-1444681467),o=w(o,r,i,n,e[s+2],9,-51403784),n=w(n,o,r,i,e[s+7],14,1735328473),r=N(r,i=w(i,n,o,r,e[s+12],20,-1926607734),n,o,e[s+5],4,-378558),o=N(o,r,i,n,e[s+8],11,-2022574463),n=N(n,o,r,i,e[s+11],16,1839030562),i=N(i,n,o,r,e[s+14],23,-35309556),r=N(r,i,n,o,e[s+1],4,-1530992060),o=N(o,r,i,n,e[s+4],11,1272893353),n=N(n,o,r,i,e[s+7],16,-155497632),i=N(i,n,o,r,e[s+10],23,-1094730640),r=N(r,i,n,o,e[s+13],4,681279174),o=N(o,r,i,n,e[s],11,-358537222),n=N(n,o,r,i,e[s+3],16,-722521979),i=N(i,n,o,r,e[s+6],23,76029189),r=N(r,i,n,o,e[s+9],4,-640364487),o=N(o,r,i,n,e[s+12],11,-421815835),n=N(n,o,r,i,e[s+15],16,530742520),r=T(r,i=N(i,n,o,r,e[s+2],23,-995338651),n,o,e[s],6,-198630844),o=T(o,r,i,n,e[s+7],10,1126891415),n=T(n,o,r,i,e[s+14],15,-1416354905),i=T(i,n,o,r,e[s+5],21,-57434055),r=T(r,i,n,o,e[s+12],6,1700485571),o=T(o,r,i,n,e[s+3],10,-1894986606),n=T(n,o,r,i,e[s+10],15,-1051523),i=T(i,n,o,r,e[s+1],21,-2054922799),r=T(r,i,n,o,e[s+8],6,1873313359),o=T(o,r,i,n,e[s+15],10,-30611744),n=T(n,o,r,i,e[s+6],15,-1560198380),i=T(i,n,o,r,e[s+13],21,1309151649),r=T(r,i,n,o,e[s+4],6,-145523070),o=T(o,r,i,n,e[s+11],10,-1120210379),n=T(n,o,r,i,e[s+2],15,718787259),i=T(i,n,o,r,e[s+9],21,-343485551),r=I(r,d),i=I(i,a),n=I(n,l),o=I(o,c)}return[r,i,n,o]}(function(e){if(0===e.length)return[];for(var t=8*e.length,r=new Uint32Array(b(t)),i=0;i<t;i+=8)r[i>>5]|=(255&e[i/8])<<i%32;return r}(e),8*e.length))})),S=function(e,t,r){var i=(e=e||{}).random||(e.rng||o)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,t){r=r||0;for(var n=0;n<16;++n)t[r+n]=i[n];return t}return c(i)};function O(e,t,r,i){switch(e){case 0:return t&r^~t&i;case 1:case 3:return t^r^i;case 2:return t&r^t&i^r&i}}function C(e,t){return e<<t|e>>>32-t}const F=v("v5",80,(function(e){var t=[1518500249,1859775393,2400959708,3395469782],r=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){var i=unescape(encodeURIComponent(e));e=[];for(var n=0;n<i.length;++n)e.push(i.charCodeAt(n))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);for(var o=e.length/4+2,s=Math.ceil(o/16),d=new Array(s),a=0;a<s;++a){for(var l=new Uint32Array(16),c=0;c<16;++c)l[c]=e[64*a+4*c]<<24|e[64*a+4*c+1]<<16|e[64*a+4*c+2]<<8|e[64*a+4*c+3];d[a]=l}d[s-1][14]=8*(e.length-1)/Math.pow(2,32),d[s-1][14]=Math.floor(d[s-1][14]),d[s-1][15]=8*(e.length-1)&4294967295;for(var u=0;u<s;++u){for(var h=new Uint32Array(80),p=0;p<16;++p)h[p]=d[u][p];for(var f=16;f<80;++f)h[f]=C(h[f-3]^h[f-8]^h[f-14]^h[f-16],1);for(var g=r[0],_=r[1],v=r[2],b=r[3],I=r[4],y=0;y<80;++y){var m=Math.floor(y/20),w=C(g,5)+O(m,_,v,b)+I+t[m]+h[y]>>>0;I=b,b=v,v=C(_,30)>>>0,_=g,g=w}r[0]=r[0]+g>>>0,r[1]=r[1]+_>>>0,r[2]=r[2]+v>>>0,r[3]=r[3]+b>>>0,r[4]=r[4]+I>>>0}return[r[0]>>24&255,r[0]>>16&255,r[0]>>8&255,255&r[0],r[1]>>24&255,r[1]>>16&255,r[1]>>8&255,255&r[1],r[2]>>24&255,r[2]>>16&255,r[2]>>8&255,255&r[2],r[3]>>24&255,r[3]>>16&255,r[3]>>8&255,255&r[3],r[4]>>24&255,r[4]>>16&255,r[4]>>8&255,255&r[4]]})),E="00000000-0000-0000-0000-000000000000",j=function(e){if(!d(e))throw TypeError("Invalid UUID");return parseInt(e.substr(14,1),16)}}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var r=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(r.exports,r,r.exports,__webpack_require__),r.exports}__webpack_require__.d=(e,t)=>{for(var r in t)__webpack_require__.o(t,r)&&!__webpack_require__.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__={};(()=>{console.log("hello from background.js");const e=__webpack_require__(5571),t=__webpack_require__(4340);chrome.runtime.onMessage.addListener((function(r,i,n){console.log({message:r,sender:i,senderResponse:n});const{apiKey:o,fetchFormId:s}=r;switch(r.type){case"GetFormAsJson":e.TreeManager.getInstance().getTree(o,s).then((e=>{n(e)})).catch((e=>{console.log("Failed to GetFormAsJson"),console.log(e),n(e)}));break;case"GetSubmissionFromApiRequest":const{submissionId:i}=r;t.SubmissionManager.getInstance().getSubmission(o,i).then((e=>{n(e)}))}return!0}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,