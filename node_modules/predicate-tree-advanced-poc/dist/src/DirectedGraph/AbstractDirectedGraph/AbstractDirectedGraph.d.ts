import { AbstractTree } from "../AbstractTree/AbstractTree";
import { IDirectedGraph } from "../ITree";
import type { TNodePojo, TTreePojo, TGenericNodeContent } from "../types";
declare abstract class AbstractDirectedGraph<T extends object> extends AbstractTree<T> implements IDirectedGraph<T> {
    #private;
    appendChildNodeWithContent(parentNodeId: string, nodeContent: TGenericNodeContent<T>): string;
    cloneAt(nodeId: string): IDirectedGraph<T>;
    /**
     * The tricky bit here is that the  subtree._rootNodeId
     * must be the same as parent's node.nodeId
     * @param targetParentNodeId
     * @returns
     */
    createSubtreeAt<Q extends IDirectedGraph<T>>(parentNodeId: string): Q;
    protected fromPojoAppendChildNodeWithContent(parentNodeId: string, nodeContent: TGenericNodeContent<T>): string;
    protected static getNewInstance<P extends object>(rootSeedNodeId?: string, nodeContent?: P): GenericDirectedGraph<P>;
    static fromPojo<P extends object, Q>(srcPojoTree: TTreePojo<P>, transform?: (nodeContent: TNodePojo<P>) => TGenericNodeContent<P>): IDirectedGraph<P>;
}
declare class GenericDirectedGraph<P extends object> extends AbstractDirectedGraph<P> implements IDirectedGraph<P> {
}
export { AbstractDirectedGraph, GenericDirectedGraph };
