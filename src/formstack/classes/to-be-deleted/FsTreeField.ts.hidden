import {
  AbstractExpressionTree,
  IExpressionTree,
} from "predicate-tree-advanced-poc/dist/src";
import { AbstractFsTreeGeneric } from "./AbstractFsTreeGeneric";
import { TFsNode } from "./types";

class FsTreeField extends AbstractFsTreeGeneric {
  createSubtreeAt<FSExpressionTree>(
    targetNodeId: string
  ): IExpressionTree<TFsNode> {
    return new FsTreeField();
  }
  createSubtreeAt2<T>(
    targetNodeId: string,
    subtreeConstructor: (
      rootIdSeed?: string,
      rootNodeContent?: any
    ) => AbstractFsTreeGeneric
  ): T {
    const subtree = subtreeConstructor("_subtree_");
    //new AbstractFsTreeGeneric("_subtree_");

    const subtreeParentNodeId = this.appendChildNodeWithContent(
      targetNodeId,
      subtree
    );

    AbstractExpressionTree.reRootTreeAt<TFsNode>(
      subtree,
      subtree.rootNodeId,
      subtreeParentNodeId
    );
    subtree._rootNodeId = subtreeParentNodeId;
    subtree._incrementor = this._incrementor;

    return subtree as T; // IExpressionTree<TFsNode>;
  }
}
export { FsTreeField };
